[["Map",1,2,7,8],"meta::meta",["Map",3,4,5,6],"astro-version","5.0.3","config-digest","8d1b7566f4d3c391","blog",["Map",9,10],"how-start-with-nodejs",{"id":9,"data":11,"body":16,"filePath":17,"digest":18,"deferredRender":19},{"title":12,"description":13,"pubDate":14,"heroImage":15},"Como empezar con Node.js: Una Guía para Principiantes","Descubre cómo empezar con Node.js en este artículo donde explico su funcionamiento interno y lo que sucede ‘bajo el capó’. Aprende los conceptos clave, desde su arquitectura basada en eventos hasta cómo maneja el rendimiento y la concurrencia. Ideal para principiantes y desarrolladores que desean profundizar en esta potente tecnología.",["Date","2024-12-13T06:00:00.000Z"],"/blog/start-with-nodejs.png","import Mermaid from '../../components/Markdown/Mermaid.astro'\n\nEl ecosistema de Node.js ha crecido enormemente en los últimos años, convirtiéndose en una de las herramientas más populares para desarrollar aplicaciones backend modernas. Si estás interesado en comenzar tu camino con Node.js, este artículo te guiará paso a paso desde la instalación hasta la creación de tu primera aplicación básica.\n\n## ¿Qué es Node.js y por qué deberías usarlo?\n\nNode.js es un entorno de ejecución de JavaScript de código abierto y multiplataforma que permite ejecutar JavaScript fuera de un navegador web. Esto significa que puedes utilizar JavaScript para crear aplicaciones de servidor, aplicaciones de línea de comandos y mucho más. Una de las características más destacadas de Node.js es su modelo de E/S no bloqueante, lo que significa que puede manejar muchas conexiones simultáneas de manera eficiente.\n\n**Por qué usar Node.js**:\n\n- **JavaScript en el backend**: Si ya conoces JavaScript, la curva de aprendizaje es muy suave.\n- **Rendimiento**: Su modelo basado en eventos y no bloqueante es ideal para aplicaciones en tiempo real.\n- **Ecositema**: Una amplia variedad de paquetes disponibles a través de npm, yarn o pnpm.\n- **Flexibilidad**: Se puede utilizar para crear una amplia variedad de aplicaciones, desde simples servidores web hasta aplicaciones empresariales complejas.\n\n\n## Instalación de Node.js: Una Guía Completa\n\n### **Windows**\n\n1.  **Descarga el instalador:**  Visita  [https://nodejs.org/](https://www.google.com/url?sa=E&source=gmail&q=https://nodejs.org/)  y descarga el instalador LTS (Long Term Support) recomendado para la mayoría de los usuarios.\n2.  **Ejecuta el instalador:**  Sigue las instrucciones del instalador. Por lo general, solo tienes que hacer clic en \"Siguiente\" varias veces.\n3.  **Verifica la instalación:**  Abre un terminal o PowerShell y ejecuta los siguientes comandos:\n\n```bash\nnode -v\nnpm -v\n```\n\n> Si la instalación fue exitosa, verás las versiones de Node.js y npm.\n\n### **macOS (usando Homebrew)**\n\n**¿Qué es Homebrew?**  Homebrew es un gestor de paquetes libre y gratuito para macOS que facilita la instalación de software. Si aún no lo tienes instalado, puedes hacerlo siguiendo las instrucciones en  [https://brew.sh/](https://www.google.com/url?sa=E&source=gmail&q=https://brew.sh/).\n\n1.  **Instala Node.js con Homebrew:**\n        \n```bash\nbrew install node\n```\nEste comando instalará la última versión estable de Node.js y npm.\n2.  **Verifica la instalación:**\n    \n```bash\nnode -v\nnpm -v\n```\n    \n**Instalación de una versión específica:**  Si necesitas una versión específica de Node.js, puedes usar  `brew install node@\u003Cversion>`. Por ejemplo, para instalar la versión 16:\n\n```bash\nbrew install node@21\n```\n\n### **Linux**\n\nLos métodos de instalación varían según la distribución de Linux que estés usando. Aquí te presento algunos de los métodos más comunes:\n\n#### **Ubuntu/Debian:**\n\n1.  **Actualiza el índice de paquetes:**\n    ```bash\n    sudo apt update\n    ```\n    \n2.  **Instala Node.js**\n    ```bash\n    sudo apt install nodejs\n    ```\n\n### **Creando tu primer programa Node.js**\n\n1.  **Crea un archivo:**  Crea un nuevo archivo llamado  `index.js`.\n2.  **Escribe el código:**\n    ```js\n    console.log(\"¡Hola desde Node.js!\");\n    ```\n    \n3.  **Ejecuta el programa:**\n    ```bash\n    node index.js\n    ```\n    \n\n### **¿Cómo funciona Node.js?**\n\nNode.js utiliza un motor JavaScript de V8 (el mismo que utiliza Chrome) para ejecutar el código. \nEste motor se ejecuta en un hilo único, pero utiliza un modelo de E/S no bloqueante para manejar múltiples \nsolicitudes de manera eficiente. Cuando una operación de E/S (como leer un archivo o realizar una solicitud HTTP)\nes solicitada, Node.js no se bloquea esperando a que la operación termine. En su lugar, pasa a la siguiente tarea y,\ncuando la operación de E/S está completa, Node.js la coloca en una cola de callbacks.\n\n\u003CMermaid>\n```mermaid\nflowchart LR\nA[Codigo JS que escribimos] -- 50% js / 50% c++ --> B[Nodejs - Librerias Estandar]\nB --> C((V8)) --> E[30% js - 70% c++]\nB --> D((Libuv)) --> F[100% c++]\n```\n\u003C/Mermaid>\n\n\u003CMermaid>\n```mermaid\nflowchart LR\n\tA(Solicitud Entrante) --> B(Event Loop)\n\tB --> C{Cola de tareas}\n\tC --> D{Hay tareas?}\n\tD -- Sí --> E[Ejecutar tarea]\n\tE --> B\n\tD -- No --> F{Esperar nueva tarea}\n\tF --> B\n```\n\u003C/Mermaid>\n\n### **Próximos pasos**\n\n-   **npm:**  Aprende a utilizar npm para instalar y gestionar paquetes.\n-   **Módulos:**  Explora los módulos integrados de Node.js como  `http`,  `fs`,  `path`, etc.\n-   **Frameworks:**  Considera utilizar frameworks como Express.js para agilizar el desarrollo de aplicaciones web.\n-   **Asincronía:**  Profundiza en la programación asincrónica con callbacks, promesas y async/await.\n\n**¡Y eso es todo por ahora!**  En este tutorial básico hemos cubierto lo esencial para empezar a trabajar con \nNode.js. En futuros posts exploraremos temas más avanzados como crear servidores web, \nprofundizar sobre el Event Loop y el flujo de Node.js.","src/content/blog/how-start-with-nodejs.mdx","3558ec0ad6c4ded2",true]